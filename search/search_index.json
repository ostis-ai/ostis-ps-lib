{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the ostis-ps-lib documentation! This repository is a centralized storage for the components of problem-solvers for systems made with the OSTIS Technology.</p>"},{"location":"#what-is-ostis-ps-lib","title":"What is ostis-ps-lib?","text":"<p>ostis-ps-lib is a collection of reusable components and libraries designed to facilitate the development of knowledge bases and problem solvers of systems in the OSTIS Technology. The repository is organized into several modules, each with its own set of functionalities and responsibilities. These modules are designed to work together seamlessly, allowing for the creation of complex and intelligent problem-solving systems.</p> <p>The primary goal of ostis-ps-lib is to provide a modular and extensible framework for building advanced AI systems, enabling developers to focus on the specific problem-solving tasks at hand. By leveraging the capabilities of the OSTIS Technology, ostis-ps-lib aims to streamline the development process, reduce code duplication, and promote collaboration among developers.</p> <p>Table of contents:</p> <ul> <li>Components - list of components of knowledge base and problem solver for ostis-systems<ul> <li>Library of Common Utilities - library of common functions, utils, and classes for agents of ostis-systems</li> <li>Non-Atomic Action Interpreter Module - module for working with non-atomic actions</li> </ul> </li> <li>Development - Instructions for developers<ul> <li>Contributing Guide - how to contribute to the project</li> <li>Codestyle Guide - how to write code in the project</li> </ul> </li> <li>License</li> <li>Changelog</li> </ul>"},{"location":"_docs/CONTRIBUTING/","title":"Contributing Guide","text":"<p>This page describes rules to contribute changes and features by Pull Requests creating.</p>"},{"location":"_docs/CONTRIBUTING/#initialize","title":"Initialize","text":"<p>To initialize your repo do:</p> <ul> <li>Fork <code>https://github.com/ostis-ai/ostis-ps-lib</code>.</li> <li>Clone your fork to your machine and prepare (see Readme).</li> </ul> <pre><code>git clone git@github.com:yourlogin/ostis-ps-lib.git\ncd ostis-ps-lib\ngit remote add upstream git@github.com:ostis-ai/ostis-ps-lib.git\n</code></pre> <ul> <li>To update your <code>main</code> from <code>upstream</code> use:</li> </ul> <pre><code>git fetch upstream\ngit checkout upstream/main\n</code></pre> <ul> <li>Use <code>git rebase</code> instead of <code>merge</code>. See documentation about this command. To rebase your branch against main use:</li> </ul> <pre><code>git checkout &lt;yourbranch&gt;\ngit rebase upstream/main\n</code></pre> <ul> <li>If you have any problems, then redo:</li> </ul> <pre><code>git rebase --abort\n</code></pre> <ul> <li>Or ask in Element.</li> </ul>"},{"location":"_docs/CONTRIBUTING/#commits-message-format","title":"Commits message format","text":"<p>Each commit message should be formed as: <code>[tag1]...[tagN] Message text (#issue)</code>.</p> <p>Message text should start from an upper case letter. If commit doesn't fix or implement any #issue, then it shouldn't be pointed in commit message.</p> <p>Examples:</p> <pre>\n[bug] Fix bug with incorrect work of some function\n[docs] Update README.md\n</pre> <p>Possible tags:</p> <ul> <li><code>[bug]</code> or <code>[fix]</code> - commits with fixes;</li> <li><code>[feat]</code> - commits with new features;</li> <li><code>[refactor]</code> - commits with some code refactoring;</li> <li><code>[tests]</code> or <code>[test]</code> - changes in tests;</li> <li><code>[config]</code> - commits with changes in configuration;</li> <li><code>[review]</code> - commits with review fixes;</li> <li><code>[changelog]</code> - use when you update changelog;</li> <li><code>[docs]</code> or <code>[doc]</code> - use when you update documentation;</li> <li><code>[scripts]</code> - updates in the <code>ostis-ps-lib/scripts</code> files;</li> <li><code>[ci]</code> - changes in <code>ci</code> configuration or scripts;</li> <li><code>[git]</code> - changes in <code>git</code> configuration;</li> </ul> <p>Each commit in Pull Request should be an atomic. In other words, it should implement or fix one feature. For example:</p> <pre>\nLast commit\n...\n[tests] Add test for some function\n[changelog] Add changelog entry\n...\nInit commit\n</pre> <p>Each commit should have not much differences excluding cases, with:</p> <ul> <li>CodeStyle changes; </li> <li>Renames; </li> <li>Code formatting.</li> </ul> <p>Do atomic commits for each changes. For example if you rename some members in <code>ClassX</code> and <code>ClassY</code>, then do two commits:</p> <pre>\n[refactor] Rename members in ClassX according to codestyle\n[refactor] Rename members in ClassY according to codestyle\n</pre> <p>Do not mix codestyle changes and any logical fixes in one commit.</p> <p>All commits that not follow these rules should be split according to these rules. Otherwise they will be rejected with Pull Request.</p>"},{"location":"_docs/CONTRIBUTING/#pull-request","title":"Pull Request","text":"<p>Each Pull Request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected.</p>"},{"location":"_docs/CONTRIBUTING/#pull-request-preparation","title":"Pull Request Preparation","text":"<ul> <li>Read rules to create PR in documentation;</li> <li>Update changelog;</li> <li>Update documentation;</li> <li>Cover new functionality by tests;</li> <li>Your code should be written according to a codestyle like in sc-machine (see Codestyle rules).</li> </ul>"},{"location":"_docs/CONTRIBUTING/#pull-request-creation","title":"Pull Request creation","text":"<ul> <li>Create PR on GitHub;</li> <li>Check that CI checks were passed successfully.</li> </ul>"},{"location":"_docs/CONTRIBUTING/#pull-request-review","title":"Pull Request Review","text":"<ul> <li>Reviewer tests code from PR if CI doesn't do it;</li> <li>Reviewer submits review as set of conversations;</li> <li>Author makes review fixes at <code>Review fixes</code> commits;</li> <li>Author re-requests review;</li> <li>Reviewer resolves conversations and approves PR if conversations were fixed.</li> </ul>"},{"location":"_docs/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"_docs/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"_docs/changelog/#added","title":"Added","text":"<ul> <li>Library of common utilities (<code>ps-common-lib</code> folder)</li> <li>Non-atomic action interpreter module (<code>non-atomic-action-interpreter-module</code> folder)</li> <li>Dialog system message processing module (<code>dialog-system-message-processing-module</code> folder)</li> </ul>"},{"location":"non-atomic-action-interpreter-module/","title":"Non-Atomic Action Interpreter Module","text":"<p>This module is part of the ostis-ps-lib and is responsible for interpreting non-atomic actions within the OSTIS.</p>"},{"location":"non-atomic-action-interpreter-module/#using-module-as-an-extension-for-sc-machine","title":"Using module as an Extension for sc-machine","text":"<p>The non-atomic action interpreter Module can be used as an extension to the sc-machine. Follow these steps to integrate it:</p>"},{"location":"non-atomic-action-interpreter-module/#1-download-sc-machine-artifacts","title":"1. Download sc-machine Artifacts","text":"<ul> <li>Download pre-built artifacts of sc-machine from GitHub Releases and extract them to a location of your choice.</li> <li>Alternatively, you can build sc-machine from sources and use the resulting artifacts.</li> <li>For more details on installing and using sc-machine artifacts, refer to the sc-machine quick start guide.</li> </ul>"},{"location":"non-atomic-action-interpreter-module/#2-download-non-atomic-action-interpreter-module-artifacts","title":"2. Download Non-Atomic Action Interpreter Module Artifacts","text":"<ul> <li>Download pre-built artifacts of Non-Atomic Action Interpreter Module from GitHub Releases and extract them to a location of your choice.</li> <li>Alternatively, you can build Non-Atomic Action Interpreter Module from sources and use the resulting artifacts (see Developing Module section).</li> </ul>"},{"location":"non-atomic-action-interpreter-module/#3-specify-extension-paths","title":"3. Specify Extension Paths","text":"<ul> <li>When running the sc-machine binary, specify the path to the <code>lib/extensions</code> directory from the Non-Atomic Action Interpreter Module folder:</li> </ul> <pre><code>./path/to/sc-machine/binary -s path/to/kb.bin \\\n    -e \"path/to/sc-machine/lib/extensions;path/to/extracted/non-atomic-action-interpreter-module/lib/extensions\"\n</code></pre> <p>Replace <code>path/to/sc-machine/binary</code> with the path to the sc-machine binary, <code>path/to/kb.bin</code> with the path to your knowledge base directory, <code>path/to/non-atomic-action-interpreter-module/lib/extensions</code> with the path to extensions of Non-Atomic Action Interpreter Module and <code>path/to/sc-machine/lib/extensions</code> with the path to extensions of the sc-machine.</p>"},{"location":"non-atomic-action-interpreter-module/#developing-module","title":"Developing Module","text":""},{"location":"non-atomic-action-interpreter-module/#installation-prerequisites","title":"Installation Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>CMake (version 3.24 or higher);</li> <li>C++ Compiler with C++17 support;</li> <li>Conan package manager;</li> <li>ccache (for faster rebuilds).</li> </ul> <p>Note</p> <p>This project is not supported on Windows OS.</p>"},{"location":"non-atomic-action-interpreter-module/#installation-build","title":"Installation &amp; Build","text":""},{"location":"non-atomic-action-interpreter-module/#1-clone-repository","title":"1. Clone Repository","text":"<p>First, clone the repository containing the Non-Atomic Action Interpreter Module:</p> <pre><code>git clone https://github.com/ostis-ai/ostis-ps-lib.git\ncd ostis-ps-lib/non-atomic-action-interpreter-module\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#2-install-dependencies-with-conan","title":"2. Install Dependencies with Conan","text":"<p>The project uses Conan to manage dependencies. Choose build mode and install the required dependencies:</p> <ul> <li>Debug:</li> </ul> <pre><code>conan install . -s build_type=Debug --build=missing\n</code></pre> <ul> <li>Release</li> </ul> <pre><code>conan install . -s build_type=Release --build=missing\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#3-configure-project","title":"3. Configure Project","text":"<p>You can configure the project using CMake presets. There are three main configuration options:</p> <ul> <li>Debug with tests:</li> </ul> <pre><code>cmake --preset debug-conan\n</code></pre> <ul> <li>Release:</li> </ul> <pre><code>cmake --preset release-conan\n</code></pre> <ul> <li>Release with tests:</li> </ul> <pre><code>cmake --preset release-with-tests-conan\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#4-build-project","title":"4. Build Project","text":"<p>After configuring, you can build the project:</p> <p>For debug build:</p> <pre><code>cmake --build --preset debug\n</code></pre> <p>For release build:</p> <pre><code>cmake --build --preset release\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#5-run-tests","title":"5. Run Tests","text":"<p>If you've configured the project with tests, you can run them using CTest:</p> <pre><code>cd build/&lt;Debug|Release&gt;\nctest -V\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#configuration-options","title":"Configuration Options","text":"<p>The following options can be set when configuring the project:</p> <ul> <li><code>SC_BUILD_TESTS</code>: Set to ON to build unit tests (default is OFF).</li> <li><code>SC_CLANG_FORMAT_CODE</code>: Set to ON to add clang-format targets (default is OFF).</li> <li><code>AUTO_CCACHE</code>: Set to ON to use ccache for faster rebuilds (default is ON).</li> </ul> <p>Example of setting an option:</p> <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON &lt;other_options&gt;\n</code></pre>"},{"location":"non-atomic-action-interpreter-module/#troubleshooting","title":"Troubleshooting","text":"<p>For any issues or questions about using this package, please refer to the project's GitHub repository or contact the OSTIS-AI team.</p>"},{"location":"ps-common-lib/","title":"Library of Common Utilities","text":"<p>It's a library that provides common utilities and functions, likely to be used across various components of ostis-systems.</p>"},{"location":"ps-common-lib/#using-library-as-a-conan-package","title":"Using Library as a Conan Package","text":"<p>The Common library can be used as a Conan package in other projects. Here's how to integrate it:</p>"},{"location":"ps-common-lib/#1-add-the-following-to-your-conanfiletxt","title":"1. Add the following to your <code>conanfile.txt</code>:","text":"<pre><code>[requires]\nps-common-lib/0.1.0\n</code></pre>"},{"location":"ps-common-lib/#2-run-conan-to-install-the-package","title":"2. Run Conan to install the package:","text":"<pre><code>conan install . --build=missing\n</code></pre>"},{"location":"ps-common-lib/#3-in-your-cmakeliststxt-add-the-following-to-find-and-link-the-library","title":"3. In your CMakeLists.txt, add the following to find and link the library:","text":"<pre><code>find_package(ps-common-lib REQUIRED)\n\nadd_executable(your_target your_source_files.cpp)\ntarget_link_libraries(your_target PRIVATE ps-common-lib::common-utils)\n</code></pre>"},{"location":"ps-common-lib/#4-configure-your-project","title":"4. Configure your project:","text":"<pre><code>cmake --preset conan-release\n</code></pre>"},{"location":"ps-common-lib/#5-build-your-project-as-usual","title":"5. Build your project as usual:","text":"<pre><code>cmake --build --preset conan-release\n</code></pre>"},{"location":"ps-common-lib/#6-download-sc-machine-artifacts","title":"6. Download sc-machine Artifacts","text":"<ul> <li>Download pre-built artifacts of sc-machine from GitHub Releases and extract them to a location of your choice. After that you can use sc-machine binaries to load extensions with agents that use the Common library.</li> </ul> <p>Note</p> <p>The <code>ps-common-lib::common-utils</code> target provides all the necessary include directories and linked libraries. You don't need to specify them separately.</p> <p>If you're using Conan's CMake integration in your project, you might also need to add the following to your <code>conanfile.py</code>:</p> <pre><code>def generate(self):\n    tc = CMakeToolchain(self)\n    tc.generate()\n    deps = CMakeDeps(self)\n    deps.generate()\n</code></pre> <p>This ensures that the necessary CMake files are generated for finding and linking the Common library.</p>"},{"location":"ps-common-lib/#using-library-in-your-code","title":"Using Library in Your Code","text":"<p>After you've set up your project to use the Common Utilities library, you can start using its functionality in your code. Here's how to include and use the library:</p>"},{"location":"ps-common-lib/#1-include-the-necessary-headers-in-your-c-files","title":"1. Include the necessary headers in your C++ files:","text":"<pre><code>#include &lt;ps-common-lib/utils/logic_utils.hpp&gt;\n#include &lt;ps-common-lib/utils/relation_utils.hpp&gt;\n#include &lt;ps-common-lib/utils/template_params_utils.hpp&gt;\n</code></pre>"},{"location":"ps-common-lib/#2-refer-to-the-librarys-header-files-for-a-complete-list-of-available-functions-and-their-usage","title":"2. Refer to the library's header files for a complete list of available functions and their usage.","text":""},{"location":"ps-common-lib/#developing-library","title":"Developing Library","text":""},{"location":"ps-common-lib/#installation-prerequisites","title":"Installation Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>CMake (version 3.24 or higher);</li> <li>C++ Compiler with C++17 support;</li> <li>Conan package manager;</li> <li>ccache (for faster rebuilds).</li> </ul> <p>Note</p> <p>This project is not supported on Windows OS.</p>"},{"location":"ps-common-lib/#installation-build","title":"Installation &amp; Build","text":""},{"location":"ps-common-lib/#1-clone-repository","title":"1. Clone Repository","text":"<p>First, clone the repository containing the Common component:</p> <pre><code>git clone https://github.com/ostis-ai/ostis-ps-lib.git\ncd ostis-ps-lib/ps-common-lib\n</code></pre>"},{"location":"ps-common-lib/#2-install-dependencies-with-conan","title":"2. Install Dependencies with Conan","text":"<p>The project uses Conan to manage dependencies. Choose build mode and install the required dependencies:</p> <ul> <li>Debug:</li> </ul> <pre><code>conan install . -s build_type=Debug --build=missing\n</code></pre> <ul> <li>Release</li> </ul> <pre><code>conan install . -s build_type=Release --build=missing\n</code></pre>"},{"location":"ps-common-lib/#3-configure-project","title":"3. Configure Project","text":"<p>You can configure the project using CMake presets. There are three main configuration options:</p> <ul> <li>Debug with tests:</li> </ul> <pre><code>cmake --preset debug-conan\n</code></pre> <ul> <li>Release:</li> </ul> <pre><code>cmake --preset release-conan\n</code></pre> <ul> <li>Release with tests:</li> </ul> <pre><code>cmake --preset release-with-tests-conan\n</code></pre>"},{"location":"ps-common-lib/#4-build-project","title":"4. Build Project","text":"<p>After configuring, you can build the project:</p> <p>For debug build:</p> <pre><code>cmake --build --preset debug\n</code></pre> <p>For release build:</p> <pre><code>cmake --build --preset release\n</code></pre>"},{"location":"ps-common-lib/#5-run-tests","title":"5. Run Tests","text":"<p>If you've configured the project with tests, you can run them using CTest:</p> <pre><code>cd build/&lt;Debug|Release&gt;\nctest -V\n</code></pre>"},{"location":"ps-common-lib/#configuration-options","title":"Configuration Options","text":"<p>The following options can be set when configuring the project:</p> <ul> <li><code>SC_BUILD_TESTS</code>: Set to ON to build unit tests (default is OFF).</li> <li><code>SC_CLANG_FORMAT_CODE</code>: Set to ON to add clang-format targets (default is OFF).</li> <li><code>AUTO_CCACHE</code>: Set to ON to use ccache for faster rebuilds (default is ON).</li> </ul> <p>Example of setting an option:</p> <pre><code>cmake --preset release-with-tests-conan -DSC_CLANG_FORMAT_CODE=ON &lt;other_options&gt;\n</code></pre>"},{"location":"ps-common-lib/#troubleshooting","title":"Troubleshooting","text":"<p>For any issues or questions about using this package, please refer to the project's GitHub repository or contact the OSTIS-AI team.</p>"}]}